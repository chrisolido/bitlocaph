{"version":3,"sources":["assets/images/app/sample_app.png","assets/images/app/marker.png","components/Header/index.jsx","components/Header/Header.jsx","constants/header.jsx","components/Icon/Icon.jsx","components/Icon/index.jsx","components/Button/index.jsx","components/Button/Button.jsx","constants/home.jsx","containers/Home/index.jsx","containers/Home/Home.jsx","serviceWorker.js","util-helpers/font-initialization.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","navList","name","url","react_default","a","createElement","className","map","_ref","key","href","concat","Icon","index_es","icon","defaultProps","undefined","Button","label","components_Icon","PAYMENT_TYPE","Home","components_Header","components_Button","src","app_marker","alt","app_image","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","library","add","fab","faGooglePlay","faAppStore","ReactDOM","render","containers_Home","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cdf8bc8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sample_app.75065dc5.png\";","module.exports = __webpack_public_path__ + \"static/media/marker.2c8fe3ce.png\";","import Header from \"./Header\";\n\nexport default Header;\n","import React from \"react\";\nimport {\n  WEBSITE_NAME,\n  ABOUT_US,\n  CONTACT_US,\n  PASSENGER,\n  DRIVER,\n  HOW_TO\n} from \"../../constants/header\";\n\nconst Header = () => {\n  const navList = [\n    {\n      name: PASSENGER,\n      url: \"passenger\"\n    },\n    {\n      name: DRIVER,\n      url: \"driver\"\n    },\n    {\n      name: HOW_TO,\n      url: \"how-to\"\n    },\n    {\n      name: CONTACT_US,\n      url: \"contact-us\"\n    },\n    {\n      name: ABOUT_US,\n      url: \"about-us\"\n    }\n  ];\n\n  return (\n    <header className=\"Header\">\n      <nav>\n        <div>\n          <span className=\"header-name\">{WEBSITE_NAME}</span>\n        </div>\n        <div>\n          <ul>\n            {navList.map(({ name, url }) => (\n              <li key={url}>\n                <a href={`#${url}`}>{name}</a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","const WEBSITE_NAME = \"bitlocaPh\";\nconst ABOUT_US = \"About Us\";\nconst CONTACT_US = \"Contact Us\";\nconst PASSENGER = \"Passenger\";\nconst DRIVER = \"Driver\";\nconst HOW_TO = \"How to\";\n\nexport { WEBSITE_NAME, ABOUT_US, CONTACT_US, PASSENGER, DRIVER, HOW_TO };\n","import React from \"react\";\nimport { string, oneOfType, arrayOf } from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Icon = ({ name, className }) => (\n  <FontAwesomeIcon icon={name} className={className} />\n);\n\nIcon.propTypes = {\n  name: oneOfType([string.isRequired, arrayOf(string.isRequired)]).isRequired,\n  className: string\n};\n\nIcon.defaultProps = {\n  className: undefined\n};\n\nexport default Icon;\n","import Icon from \"./Icon\";\n\nexport default Icon;\n","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\nimport { oneOfType, string, arrayOf } from \"prop-types\";\n\nimport Icon from \"../Icon\";\n\nconst Button = ({ icon, label }) => (\n  <button className=\"Button\">\n    <Icon name={icon} />\n    <span>{label}</span>\n  </button>\n);\n\nButton.propTypes = {\n  icon: oneOfType([string, arrayOf(string)]),\n  label: string.isRequired\n};\n\nexport default Button;\n","const TAG_LINE = \"Find a car, anywhere, everywhere!\";\nconst PAYMENT = \"Accepts Payment\";\nconst PAYMENT_TYPE = [\n  { name: \"Bitcoin\" },\n  { name: \"Credit/Debit Card\" },\n  { name: \"Cash\" }\n];\nconst DOWNLOAD_NOW = \"Download Now\";\nconst PLAY_STORE = \"Play Store\";\nconst APP_STORE = \"App Store\";\n\nexport { TAG_LINE, PAYMENT, PAYMENT_TYPE, DOWNLOAD_NOW, PLAY_STORE, APP_STORE };\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nimport { Header, Button } from \"../../components\";\nimport {\n  TAG_LINE,\n  PAYMENT,\n  PAYMENT_TYPE,\n  DOWNLOAD_NOW,\n  PLAY_STORE,\n  APP_STORE\n} from \"../../constants/home\";\n\nimport app_image from \"../../assets/images/app/sample_app.png\";\nimport app_marker from \"../../assets/images/app/marker.png\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <Header />\n        <div className=\"content\">\n          <div className=\"content-left\">\n            <div className=\"content-left-tagline\">\n              <span>{TAG_LINE}</span>\n            </div>\n            <div className=\"content-left-payment\">\n              <span>{PAYMENT}</span>\n              <ul>\n                {PAYMENT_TYPE.map(({ name }) => (\n                  <li key={name}>- {name}</li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"content-left-download\">\n              <span>{DOWNLOAD_NOW}</span>\n              <div className=\"content-left-download-button\">\n                <Button label={PLAY_STORE} icon={[\"fab\", \"google-play\"]} />\n                <Button label={APP_STORE} icon={[\"fab\", \"app-store\"]} />\n              </div>\n            </div>\n          </div>\n          <div className=\"content-center\">\n            <img src={app_marker} alt=\"marker\" />\n          </div>\n          <div className=\"content-right\">\n            <img src={app_image} alt=\"app\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  fab,\n  faGooglePlay,\n  faAppStore\n} from \"@fortawesome/free-brands-svg-icons\";\n// import { faGooglePlay } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(fab, faGooglePlay, faAppStore);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Home } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./util-helpers/font-initialization\";\n\nimport \"./styles/index.scss\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}